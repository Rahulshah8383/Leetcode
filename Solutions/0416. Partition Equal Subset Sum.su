class Solution {
public:
    /*
    bool recursion(vector<int>& nums, int target, int i){
        if(target == 0){
            return true;
        }

        if(i == 0){
            return nums[0] == target;
        }

        bool notPick = recursion(nums, target, i-1);
        bool pick = false;
        if(nums[i] <= target){
            pick = recursion(nums, target-nums[i], i-1);
        }

        return notPick || pick;
    }
    */

    /*
    bool memorization(vector<int>& nums, int target, int i, vector<vector<int>> &dp){
        if(target == 0){
            return true;
        }

        if(i == 0){
            return nums[0] == target;
        }

        if(dp[i][target] != -1){
            return dp[i][target];
        }

        bool notPick = memorization(nums, target, i-1, dp);
        bool pick = false;
        if(nums[i] <= target){
            pick = memorization(nums, target-nums[i], i-1, dp);
        }

        return dp[i][target] = notPick || pick;
    }
    */


    /*
    bool tabular(vector<int> &nums, int sum, int n) {
        // Initialize a 2D DP array with dimensions (n x k+1) to store subproblem results
        vector<vector<bool>> dp(n, vector<bool>(sum + 1, false));
    
        // Base case: If the target sum is 0, we can always achieve it by taking no elements
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }
    
        // Base case: If the first element of 'arr' is less than or equal to 'sum', set dp[0][nums[0]] to true
        if (nums[0] <= sum) {
            dp[0][nums[0]] = true;
        }
    
        // Fill the DP array iteratively
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= sum; target++) {
                // If we don't take the current element, the result is the same as the previous row
                bool notTaken = dp[ind - 1][target];
    
                // If we take the current element, subtract its value from the target and check the previous row
                bool taken = false;
                if (nums[ind] <= target) {
                    taken = dp[ind - 1][target - nums[ind]];
                }
    
                // Store the result in the DP array for the current subproblem
                dp[ind][target] = notTaken || taken;
            }
        }
    
        // The final result is stored in dp[n-1][k]
        return dp[n - 1][sum];
    }
    */

    bool SpaceOP(vector<int> &nums, int sum, int n) {
        // Initialize a vector 'prev' to store the previous row of the DP table
        vector<bool> prev(sum + 1, false);
    
        // Base case: If the target sum is 0, we can always achieve it by taking no elements
        prev[0] = true;
    
        // Base case: If the first element of 'arr' is less than or equal to 'k', set prev[nums[0]] to true
        if (nums[0] <= sum) {
            prev[nums[0]] = true;
        }
    
        // Iterate through the elements of 'arr' and update the DP table
        for (int ind = 1; ind < n; ind++) {
            // Initialize a new row 'cur' to store the current state of the DP table
            vector<bool> cur(sum + 1, false);
    
            // Base case: If the target sum is 0, we can achieve it by taking no elements
            cur[0] = true;
    
            for (int target = 1; target <= sum; target++) {
                // If we don't take the current element, the result is the same as the previous row
                bool notTaken = prev[target];
    
                // If we take the current element, subtract its value from the target and check the previous row
                bool taken = false;
                if (nums[ind] <= target) {
                    taken = prev[target - nums[ind]];
                }
    
                // Store the result in the current DP table row for the current subproblem
                cur[target] = notTaken || taken;
            }
    
            // Update 'prev' with the current row 'cur' for the next iteration
            prev = cur;
        }
    
        // The final result is stored in prev[k]
        return prev[sum];
    }

    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int totalSum = 0;
        for(int i=0;i<n;i++){
            totalSum += nums[i];
        }

        if(totalSum%2 == 1){
            return false;
        }
        else{
            int target = totalSum/2;

            // return recursion(nums, target, n-1);

            // vector<vector<int>> dp(n, vector<int>(target+1, -1));
            // return memorization(nums, target, n-1, dp);

            // return tabular(nums, target, n);

            return SpaceOP(nums, target, n);
        }   
    }
};
